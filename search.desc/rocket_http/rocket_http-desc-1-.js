searchState.loadedDescShard("rocket_http", 1, "Returns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nGet the scheme of this <code>Uri</code>.\nGet the scheme of this <code>Uri</code> as a <code>&amp;str</code>.\nHTTP Server\nAsynchronous Services\nMark that the header value represents sensitive …\nReturns the <code>StatusCode</code>.\nReturns a mutable reference to the associated <code>StatusCode</code>.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nYields a <code>&amp;str</code> slice if the <code>HeaderValue</code> only contains …\nCreates a new <code>Builder</code> initialized with a TRACE method and …\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nHTTP Upgrades\nURI component of request and response lines\nReturns a reference to the associated URI.\nReturns a mutable reference to the associated URI.\nReturns the associated version.\nReturns a reference to the associated version.\nReturns a mutable reference to the associated version.\nReturns a mutable reference to the associated version.\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nWrap a futures <code>Stream</code> in a box inside <code>Body</code>.\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nA stream of <code>Bytes</code>, used when receiving bodies.\nRead bytes from a buffer.\nA cheaply cloneable and sliceable chunk of contiguous …\nValues yielded by the <code>Body</code>.\nThe error type this <code>Body</code> might generate.\nTrait representing a streaming body of a Request or …\nA sender half created through <code>Body::channel()</code>.\nA <code>Body</code> size hint\nAborts the body in an abnormal fashion.\nAdvance the internal cursor of the Buf\nAggregate the data buffers from a body asynchronously.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nTurn this body into a boxed trait object.\nTurn this body into a boxed trait object that is !Sync.\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nCreates an adaptor which will chain this buffer with …\nReturns a slice starting at the current position and of …\nFills <code>dst</code> with potentially multiple slices starting at <code>self</code>…\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nClears the buffer, removing all data.\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nTurn this body into <code>Collected</code> body which will collect all …\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nCreates <code>Bytes</code> instance from slice, by copying it.\nConsumes <code>len</code> bytes inside self and returns new instance of …\nCopies bytes from <code>self</code> into <code>dst</code>.\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns future that resolves to next data chunk, if any.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns the exact size of data that will be yielded <strong>if</strong> the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate Bytes with a buffer whose lifetime is controlled …\nCreates a new <code>Bytes</code> from a static slice.\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets a signed 128 bit integer from <code>self</code> in big-endian byte …\nGets a signed 128 bit integer from <code>self</code> in little-endian …\nGets a signed 128 bit integer from <code>self</code> in native-endian …\nGets a signed 16 bit integer from <code>self</code> in big-endian byte …\nGets a signed 16 bit integer from <code>self</code> in little-endian …\nGets a signed 16 bit integer from <code>self</code> in native-endian …\nGets a signed 32 bit integer from <code>self</code> in big-endian byte …\nGets a signed 32 bit integer from <code>self</code> in little-endian …\nGets a signed 32 bit integer from <code>self</code> in native-endian …\nGets a signed 64 bit integer from <code>self</code> in big-endian byte …\nGets a signed 64 bit integer from <code>self</code> in little-endian …\nGets a signed 64 bit integer from <code>self</code> in native-endian …\nGets a signed 8 bit integer from <code>self</code>.\nGets a signed n-byte integer from <code>self</code> in big-endian byte …\nGets a signed n-byte integer from <code>self</code> in little-endian …\nGets a signed n-byte integer from <code>self</code> in native-endian …\nGets an unsigned 128 bit integer from <code>self</code> in big-endian …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 16 bit integer from <code>self</code> in big-endian …\nGets an unsigned 16 bit integer from <code>self</code> in little-endian …\nGets an unsigned 16 bit integer from <code>self</code> in native-endian …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 32 bit integer from <code>self</code> in the …\nGets an unsigned 32 bit integer from <code>self</code> in native-endian …\nGets an unsigned 64 bit integer from <code>self</code> in big-endian …\nGets an unsigned 64 bit integer from <code>self</code> in little-endian …\nGets an unsigned 64 bit integer from <code>self</code> in native-endian …\nGets an unsigned 8 bit integer from <code>self</code>.\nGets an unsigned n-byte integer from <code>self</code> in big-endian …\nGets an unsigned n-byte integer from <code>self</code> in little-endian …\nGets an unsigned n-byte integer from <code>self</code> in native-endian …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns true if there are any more bytes to consume\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns true if the <code>Bytes</code> has a length of 0.\nReturns <code>true</code> when the end of stream has been reached.\nReturns true if this is the only reference to the data and …\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns the number of bytes contained in this <code>Bytes</code>.\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns the lower bound of data that the <code>Body</code> will yield …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nMaps this body’s data value to a different value.\nMaps this body’s error value to a different value.\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nCreates a new empty <code>Bytes</code>.\nReturns a new <code>SizeHint</code> with default values\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nAttempt to pull out the next data buffer of this stream.\nCheck to see if this <code>Sender</code> can send more data.\nPoll for an optional <strong>single</strong> <code>HeaderMap</code> of trailers.\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nCreates an adaptor which implements the <code>Read</code> trait for <code>self</code>…\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns the number of bytes between the current position …\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nSend data on data channel when it is ready.\nSend trailers on trailers channel.\nSet the value of the <code>lower</code> and <code>upper</code> bounds to exactly the …\nSet the value of the <code>lower</code> hint.\nSet the value of the <code>upper</code> hint value.\nReturns the bounds on the remaining length of the stream.\nReturns a slice of self for the provided range.\nReturns a slice of self that is equivalent to the given …\nSplits the bytes into two at the given index.\nSplits the bytes into two at the given index.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nCreates an adaptor which will read at most <code>limit</code> bytes …\nConcatenate the buffers from a body into a single <code>Bytes</code> …\nReturns future that resolves to trailers, if any.\nShortens the buffer, keeping the first <code>len</code> bytes and …\nCopies bytes from <code>self</code> into <code>dst</code>.\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 single-precision (4 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets an IEEE754 double-precision (8 bytes) floating point …\nGets a signed 128 bit integer from <code>self</code> in big-endian byte …\nGets a signed 128 bit integer from <code>self</code> in little-endian …\nGets a signed 128 bit integer from <code>self</code> in native-endian …\nGets a signed 16 bit integer from <code>self</code> in big-endian byte …\nGets an signed 16 bit integer from <code>self</code> in little-endian …\nGets a signed 16 bit integer from <code>self</code> in native-endian …\nGets a signed 32 bit integer from <code>self</code> in big-endian byte …\nGets a signed 32 bit integer from <code>self</code> in little-endian …\nGets a signed 32 bit integer from <code>self</code> in native-endian …\nGets a signed 64 bit integer from <code>self</code> in big-endian byte …\nGets a signed 64 bit integer from <code>self</code> in little-endian …\nGets a signed 64 bit integer from <code>self</code> in native-endian …\nGets a signed 8 bit integer from <code>self</code>.\nGets a signed n-byte integer from <code>self</code> in big-endian byte …\nGets a signed n-byte integer from <code>self</code> in little-endian …\nGets a signed n-byte integer from <code>self</code> in native-endian …\nGets an unsigned 128 bit integer from <code>self</code> in big-endian …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 128 bit integer from <code>self</code> in …\nGets an unsigned 16 bit integer from <code>self</code> in big-endian …\nGets an unsigned 16 bit integer from <code>self</code> in little-endian …\nGets an unsigned 16 bit integer from <code>self</code> in native-endian …\nGets an unsigned 32 bit integer from <code>self</code> in big-endian …\nGets an unsigned 32 bit integer from <code>self</code> in little-endian …\nGets an unsigned 32 bit integer from <code>self</code> in native-endian …\nGets an unsigned 64 bit integer from <code>self</code> in big-endian …\nGets an unsigned 64 bit integer from <code>self</code> in little-endian …\nGets an unsigned 64 bit integer from <code>self</code> in native-endian …\nGets an unsigned 8 bit integer from <code>self</code>.\nGets an unsigned n-byte integer from <code>self</code> in big-endian …\nGets an unsigned n-byte integer from <code>self</code> in little-endian …\nGets an unsigned n-byte integer from <code>self</code> in native-endian …\nTry to convert self into <code>BytesMut</code>.\nTry to send data on this channel.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns the upper bound of data the <code>Body</code> will yield before …\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns a new <code>SizeHint</code> with both upper and lower bounds …\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nAdvertises which content types the client is able to …\nAdvertises which character set the client is able to …\nAdvertises which content encoding the client is able to …\nAdvertises which languages the client is able to …\nMarker used by the server to advertise partial request …\nPreflight response indicating if the response to the …\nPreflight response indicating permitted HTTP headers.\nPreflight header response indicating permitted access …\nIndicates whether the response can be shared with …\nIndicates which headers can be exposed as part of the …\nIndicates how long the results of a preflight request can …\nInforms the server which HTTP headers will be used when an …\nInforms the server know which HTTP method will be used …\nLists the set of methods support by a resource.\nContains the credentials to authenticate a user agent with …\nSpecifies directives for caching mechanisms in both …\nControls whether or not the network connection stays open …\nIndicates if the content is expected to be displayed …\nUsed to compress the media-type.\nUsed to describe the languages intended for the audience.\nIndicates the size of the entity-body.\nIndicates an alternate location for the returned data.\nIndicates where in a full body message a partial message …\nAllows controlling resources the user agent is allowed to …\nAllows experimenting with policies by monitoring their …\nUsed to indicate the media type of the resource.\nContains the date and time at which the message was …\nIdentifier for a specific version of a resource.\nIndicates expectations that need to be fulfilled by the …\nContains the date/time after which the response is …\nContains information from the client-facing side of proxy …\nContains an Internet email address for a human user who …\nSpecifies the domain name of the server and (optionally) …\nMakes a request conditional based on the E-Tag.\nMakes a request conditional based on the modification date.\nMakes a request conditional based on the E-Tag.\nMakes a request conditional based on range.\nMakes the request conditional based on the last …\nContent-Types that are acceptable for the response.\nAllows the server to point an interested client to another …\nIndicates the URL to redirect a page to.\nIndicates where a fetch originates from.\nHTTP/1.0 header usually used for backwards compatibility.\nIndicates the part of a document that the server should …\nContains the address of the previous web page from which a …\nGoverns which referrer information should be included with …\nInforms the web browser that the current page or frame …\nTells the client to communicate with HTTPS instead of …\nInforms the server of transfer encodings willing to be …\nSpecifies the form of encoding used to safely transfer the …\nUsed as part of the exchange to upgrade the protocol.\nContains a string that allows identifying the requesting …\nDetermines how to match future requests with cached …\nAn HTTP request builder\nComponent parts of an HTTP <code>Request</code>\nRepresents an HTTP request.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\n“Consumes” this builder, using the provided <code>body</code> to …\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nAdds an extension to this builder\nThe request’s extensions\nGet a mutable reference to the extensions for this request …\nGet a reference to the extensions for this request builder.\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nAppends a header to this request builder.\nThe request’s headers\nGet headers on this request builder.\nGet header on this request builder. when builder has error …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nSet the HTTP method for this request.\nThe request’s method\nGet the HTTP Method for this request.\nCreates a new default instance of <code>Builder</code> to construct a …\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nSet the URI for this request.\nThe request’s URI\nGet the URI for this request\nSet the HTTP version for this request.\nThe request’s version\nGet the HTTP version for this request\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nA builder for a <code>Server</code>.\nA listening HTTP server that accepts connections in both …\nThe <code>Accept</code> trait and supporting types.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nBinds to the provided address, and returns a <code>Builder</code>.\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nStarts a <code>Builder</code> with the provided incoming stream.\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nLower-level Server connection API.\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nSets the <code>Executor</code> to deal with connection tasks.\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new instance from a <code>std::net::TcpListener</code> …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nSet whether HTTP/1 connections should support …\nSet a timeout for reading client request headers. If a …\nSets whether to use keep-alive for HTTP/1 connections.\nSet the maximum buffer size.\nSets whether HTTP/1 is required.\nSet whether to support preserving original header cases.\nSet whether HTTP/1 connections will write header names as …\nSet whether HTTP/1 connections should try to use vectored …\nSets whether to use an adaptive flow control.\nEnables the extended CONNECT protocol.\nSets the max connection-level flow control for HTTP2\nSets the <code>SETTINGS_INITIAL_WINDOW_SIZE</code> option for HTTP2 …\nSets an interval for HTTP2 Ping frames should be sent to …\nSets a timeout for receiving an acknowledgement of the …\nSets the <code>SETTINGS_MAX_CONCURRENT_STREAMS</code> option for HTTP2 …\nSets the maximum frame size to use for HTTP2.\nSets the max size of received header frames.\nConfigures the maximum number of local reset streams …\nConfigures the maximum number of pending reset streams …\nSet the maximum write buffer size for each HTTP/2 stream.\nSets whether HTTP/2 is required.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns the local address that the server will be bound to.\nReturns the local address that this server is bound to.\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nStart a new builder, wrapping an incoming stream and …\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nConsume this <code>Builder</code>, creating a <code>Server</code>.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nSet the duration to remain idle before sending TCP …\nSet the duration between two successive TCP keepalive …\nSet the number of retransmissions to be carried out before …\nSet the value of <code>TCP_NODELAY</code> option for accepted …\nSet whether to sleep on accept errors.\nTries to bind to the provided address, and returns a …\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nPrepares a server to handle graceful shutdown when the …\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nAsynchronously accept incoming connections.\nThe connection type that can be accepted.\nThe error type that can occur when accepting a connection.\nAdapt a <code>Stream</code> of incoming connections into an <code>Accept</code>.\nPoll to accept the next connection.\nCreate an <code>Accept</code> with a polling function.\nA stream of connections from binding to an address.\nA transport returned yieled by <code>AddrIncoming</code>.\nA future building a new <code>Service</code> to a <code>Connection</code>.\nA future binding a connection with a Service.\nA lower-level configuration of the HTTP protocol.\nDeconstructed parts of a <code>Connection</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nCreates a new <code>AddrIncoming</code> binding to provided socket …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>AddrIncoming</code> from an existing …\nStart a graceful shutdown process for this connection.\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nSet whether HTTP/1 connections should support …\nSet a timeout for reading client request headers. If a …\nEnables or disables HTTP/1 keep-alive.\nSets whether HTTP1 is required.\nSet whether to support preserving original header cases.\nSet whether HTTP/1 connections will write header names as …\nSet whether HTTP/1 connections should try to use vectored …\nSets whether to use an adaptive flow control.\nEnables the extended CONNECT protocol.\nSets the max connection-level flow control for HTTP2.\nSets the <code>SETTINGS_INITIAL_WINDOW_SIZE</code> option for HTTP2 …\nSets an interval for HTTP2 Ping frames should be sent to …\nSets a timeout for receiving an acknowledgement of the …\nSets the <code>SETTINGS_MAX_CONCURRENT_STREAMS</code> option for HTTP2 …\nSets the maximum frame size to use for HTTP2.\nSets the max size of received header frames.\nConfigures the maximum number of pending reset streams …\nConfigures the maximum number of pending reset streams …\nSet the maximum write buffer size for each HTTP/2 stream.\nSets whether HTTP2 is required.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the AddrStream and returns the underlying IO …\nReturn the inner IO object, and additional information.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nThe original IO object used in the handshake.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nGet the local address bound to this listener.\nReturns the local address of this connection.\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nSet the maximum buffer size for the connection.\nCreates a new instance of the HTTP protocol, ready to …\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nAggregates flushes to better support pipelined responses.\nAttempt to receive data on the socket, without removing …\nPoll the connection for completion, but without calling …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nA buffer of bytes that have been read but not processed as …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns the remote (peer) address of this connection.\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nBind a connection together with a <code>Service</code>.\nThe <code>Service</code> used to serve this connection.\nSet the duration to remain idle before sending TCP …\nSet the duration between two successive TCP keepalive …\nSet the number of retransmissions to be carried out before …\nSet the value of <code>TCP_NODELAY</code> option for accepted …\nSet whether to sleep on accept errors.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturn the inner IO object, and additional information, if …\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nSet the executor used to spawn background tasks.\nEnable this connection to support higher-level HTTP …\nPrevent shutdown of the underlying IO object at the end of …\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nErrors produced by the service.\nThe future response value.\nResponses given by the service.\nAn asynchronous function from a <code>Request</code> to a <code>Response</code>.\nProcess the request and return the response asynchronously.\nCreate a <code>MakeService</code> from a function.\nReturns <code>Poll::Ready(Ok(()))</code> when the service is able to …\nCreate a <code>Service</code> from a function.\nA future for a possible HTTP upgrade.\nThe deconstructed parts of an <code>Upgraded</code> type.\nAn upgraded HTTP connection.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nTries to downcast the internal trait object to the type …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nThe original IO object used before the upgrade.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Linger</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Mask</code>].\nGets a pending HTTP upgrade from this message.\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: OnBright</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Magenta</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>bg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Primary</code>].\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nEnables the <code>yansi</code> <code>Quirk</code> <code>value</code>.\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nReturns <code>self</code> with the <code>attr()</code> set to […\nA buffer of bytes that have been read but not processed as …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Red</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Resetting</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Rgb</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Strike</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Underline</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nConditionally enable styling based on whether the <code>Condition</code>…\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: White</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Wrap</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Yellow</code>].\nRepresents the authority component of a URI.\nA builder for <code>Uri</code>s.\nHTTP protocol scheme\nHTTP protocol over TLS.\nAn error resulting from a failed attempt to construct a …\nAn error resulting from a failed attempt to construct a …\nThe various parts of a URI.\nRepresents the path component of a URI\nThe port component of a URI.\nRepresents the scheme component of a URI\nThe URI component of a request.\nReturns the port number as a <code>str</code>.\nReturn a str representation of the authority\nReturns the path and query as a string component.\nReturn a str representation of the scheme\nReturns the port number as a <code>u16</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nEnables the styling <code>Attribute</code> <code>value</code>.\nSet the <code>Authority</code> for this URI.\nThe authority component of a URI\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Black</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Blink</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Blue</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Bold</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Bright</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlack</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightBlue</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightCyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightGreen</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightMagenta</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightRed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightWhite</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: BrightYellow</code>].\nConsumes this builder, and tries to construct a valid <code>Uri</code> …\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>quirk()</code> set to [<code>Quirk :: Clear</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Conceal</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Cyan</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Dim</code>].\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns a styled value derived from <code>self</code> with the …\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Fixed</code>].\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempt to convert a <code>Bytes</code> buffer to a <code>Authority</code>.\nAttempt to convert a <code>Bytes</code> buffer to a <code>PathAndQuery</code>.\nAttempt to convert an <code>Authority</code> from a static string.\nConvert a <code>PathAndQuery</code> from a static string.\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nReturns <code>self</code> with the <code>fg()</code> set to [<code>Color :: Green</code>].\nGet the host of this <code>Authority</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Invert</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].\nReturns <code>self</code> with the <code>attr()</code> set to [<code>Attribute :: Italic</code>].")