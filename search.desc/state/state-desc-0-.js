searchState.loadedDescShard("state", 0, "Safe, Effortless <code>state</code> Management\nAn init-once cell for global access to a value.\nA type map storing values based on types.\nType constructor for <code>TypeMap</code> variants.\nFreezes the type_map. A frozen type_map disallows writes …\nReturns the argument unchanged.\nReturns the argument unchanged.\nBorrows the value in this cell, panicking if there is no …\nRetrieves the global state for type <code>T</code>.\nIf the cell is not initialized, it is set <code>f()</code>. Returns a …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the inner value if any is set.\nReturns <code>true</code> if <code>self</code> contains zero values.\nReturns <code>true</code> if the type_map is frozen and <code>false</code> otherwise.\nReturns the number of distinctly typed values in <code>self</code>.\nApplies the function <code>f</code> to the inner value, if there is …\nCreate a new, uninitialized cell.\nCreates a new type map with no stored values.\nCreates a new type_map with no stored values.\nCreates a new type map with no stored values.\nResets the cell to an uninitialized state.\nSets this cell’s value to <code>value</code> if it is not already …\nSets the global state for type <code>T</code> if it has not been set …\nSets the global state for type <code>T</code> if it has not been set …\nSets the global state for type <code>T</code> if it has not been set …\nResets the cell to an uninitialized state and returns the …\nGet a reference to the underlying value, if one is set.\nAttempts to retrieve the global state for type <code>T</code>.\nReturns a mutable reference to the underlying data if any …\nApplies the function <code>f</code> to the inner value, if there is …\nWaits (blocks) until the cell has a value and then borrows …")